{
	"info": {
		"_postman_id": "45153c59-5092-4f51-8314-0da646570945",
		"name": "Clear Habits Server API Tests",
		"description": "Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									"}",
									""
								],
								"id": "77b903d8-aea5-455c-b895-847bc11eeab7"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\", \"username\":\"johnjacob\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									""
								],
								"id": "93d1b28c-24ff-4b3f-a505-2de1e8394780"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/users/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login and Remember Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									"",
									"if(tests['User has \"token\" property']){",
									"    postman.setEnvironmentVariable('token', user.token);",
									"}",
									"",
									"tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
									""
								],
								"id": "ca125321-ae35-455d-9592-2e912a0709f6"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/users/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register with Duplicate Email/Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70294070-977d-45bb-9fce-28d1dce4f2a3",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"errors\" property'] = responseJSON.hasOwnProperty('errors');",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"tests['Errors has \"email\" property'] = errors.hasOwnProperty('email');",
									"tests['Errors has \"username\" property'] = errors.hasOwnProperty('username');",
									"tests[\"Status code is 422\"] = pm.response.to.have.status(422);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\", \"username\":\"johnjacob\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register with incorrect email syntax",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da3d53bb-49b5-4b3f-80ff-7fe359fe189c",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"errors\" property'] = responseJSON.hasOwnProperty('errors');",
									"",
									"    var errors = responseJSON.errors || {};",
									"",
									"    tests['Errors has \"email\" property'] = errors.hasOwnProperty('email');",
									"    tests[\"Status code is 422\"] = pm.response.to.have.status(422);",
									"",
									"    if(tests['Errors has \"email\" property']){",
									"        pm.expect(errors.email).is.to.equal(\"is invalid\")",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"jane\", \"password\":\"janedoe95\", \"username\":\"janedoe\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}