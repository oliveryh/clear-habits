{
	"info": {
		"_postman_id": "45153c59-5092-4f51-8314-0da646570945",
		"name": "Clear Habits Server API Tests",
		"description": "Collection for testing the Conduit API\n\nhttps://github.com/gothinkster/realworld",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77b903d8-aea5-455c-b895-847bc11eeab7",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\", \"username\":\"johnjacob\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93d1b28c-24ff-4b3f-a505-2de1e8394780",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									"",
									"if(tests['User has \"token\" property']){",
									"    postman.setEnvironmentVariable('token', user.token);",
									"}",
									"",
									"tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/users/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register with Duplicate Email/Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70294070-977d-45bb-9fce-28d1dce4f2a3",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"errors\" property'] = responseJSON.hasOwnProperty('errors');",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"tests['Errors has \"email\" property'] = errors.hasOwnProperty('email');",
									"tests['Errors has \"username\" property'] = errors.hasOwnProperty('username');",
									"tests[\"Status code is 422\"] = pm.response.to.have.status(422);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\", \"password\":\"johnnyjacob\", \"username\":\"johnjacob\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register with Incorrect Email Syntax",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "943d6f17-a4b5-49be-a6c3-83ff4fd1a2ec",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"errors\" property'] = responseJSON.hasOwnProperty('errors');",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"tests['Errors has \"email\" property'] = errors.hasOwnProperty('email');",
									"tests['Status code is 422'] = pm.response.to.have.status(422);",
									"",
									"if(tests['Errors has \"email\" property']){",
									"    tests['Expect email error to be blank'] = pm.expect(errors.email).is.to.equal(\"is invalid\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"fakeemail\", \"password\":\"aliceanderson\", \"username\":\"aliceanderson\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Register Second User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d128291c-598d-415f-8a39-b9b785a861dc",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									"",
									"if(tests['User has \"token\" property']){",
									"    ",
									"    postman.setEnvironmentVariable('token2', user.token);",
									"}",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"user2@user2.com\", \"password\":\"user2user2\", \"username\":\"user2\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9ef64f7-b419-4359-b3c3-e7f5f7280171",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"var tasks = responseJSON || {};",
									"",
									"tests['Tasks is empty'] = tasks.length == 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tasks",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b55c817-c5e4-4db2-8593-391a54ba5f05",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"tests['Response contains \"descriptiom\" property'] = responseJSON.hasOwnProperty('description');",
									"tests['Response contains \"completed\" property'] = responseJSON.hasOwnProperty('complete');",
									"tests['Completed attribute is false'] = responseJSON.complete == false;",
									"",
									"postman.setEnvironmentVariable('taskId1', responseJSON._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"description\":\"This is a task\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/tasks",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start Timer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de4b00fb-eeb7-4da7-bd68-9e4d0981c162",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"tests['Response contains \"timerActive\" property'] = responseJSON.hasOwnProperty('timerActive');",
									"",
									"tests['Response contains \"timerStartedAt\" property'] = responseJSON.hasOwnProperty('timerStartedAt');",
									"",
									"tests['Response contains \"timerTrackedTime\" property'] = responseJSON.hasOwnProperty('timerTrackedTime');",
									"",
									"tests['timerTrackedTime attribute defaults to 0'] = responseJSON.timerTrackedTime == 0;",
									"",
									"tests['timerActive attribute is true'] = responseJSON.timerActive == true;",
									"",
									"tests['timerStartedAt attribute is not null'] = responseJSON.timerStartedAt != null;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"type": "text",
								"value": "XMLHttpRequest"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tasks/:id/start",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks",
								":id",
								"start"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Stop Timer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9601f63a-6ed0-4e51-8507-6760a05e61f3",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"tests['Response contains \"timerActive\" property'] = responseJSON.hasOwnProperty('timerActive');",
									"",
									"tests['Response contains \"timerStartedAt\" property'] = responseJSON.hasOwnProperty('timerStartedAt');",
									"",
									"tests['Response contains \"timerTrackedTime\" property'] = responseJSON.hasOwnProperty('timerTrackedTime');",
									"",
									"tests['timerActive attribute is false'] = responseJSON.timerActive == false;",
									"",
									"tests['timerStartedAt attribute is null'] = responseJSON.timerStartedAt == null;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"type": "text",
								"value": "XMLHttpRequest"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tasks/:id/stop",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks",
								":id",
								"stop"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task Empty Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50be1566-4e0d-4974-8793-a7c3d5c11474",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"errors\" property'] = responseJSON.hasOwnProperty('errors');",
									"",
									"var errors = responseJSON.errors || {};",
									"",
									"tests['Errors has \"description\" property'] = errors.hasOwnProperty('description');",
									"tests['Status code is 422'] = pm.response.to.have.status(422);",
									"",
									"if(tests['Errors has \"description\" property']){",
									"    tests['Expect description error to be blank'] = pm.expect(errors.description).is.to.equal(\"can't be blank\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/tasks",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Non Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e120b69-2918-40f5-bfba-3d8061b80232",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"var tasks = responseJSON || {};",
									"",
									"tests['Tasks is empty'] = tasks.length == 1;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tasks",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Complete Task Allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "980c762c-35e3-4c8d-bd3c-f87cec1e0ff8",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"descriptiom\" property'] = responseJSON.hasOwnProperty('description');",
									"tests['Response contains \"completed\" property'] = responseJSON.hasOwnProperty('complete');",
									"tests['Completed attribute is true'] = responseJSON.complete == true;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"complete\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/tasks/:id",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8409e32f-06e3-4463-8e4a-68c535fb20fa",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"descriptiom\" property'] = responseJSON.hasOwnProperty('description');",
									"tests['Response contains \"completed\" property'] = responseJSON.hasOwnProperty('complete');",
									"tests['Response contains \"date\" property'] = responseJSON.hasOwnProperty('date');",
									"tests['Description attribute has changed'] = responseJSON.description == \"here is a new description\";",
									"tests['timerTrackedTime attribute has changed'] = responseJSON.timerTrackedTime == 3600;",
									"tests['date attribute has changed'] = responseJSON.date == '2020-06-18';",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"type": "text",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"here is a new description\",\n    \"timerTrackedTime\": 3600,\n    \"date\": \"2020-06-18\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/tasks/:id",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User 2 Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cafc28e3-ca75-422c-a125-2f430548f0d3",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"descriptiom\" property'] = responseJSON.hasOwnProperty('description');",
									"tests['Response contains \"completed\" property'] = responseJSON.hasOwnProperty('complete');",
									"tests['Completed attribute is false'] = responseJSON.complete == false;",
									"",
									"postman.setEnvironmentVariable('taskId2', responseJSON._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"This is a description\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/tasks",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Complete Task Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dae9416d-75ac-4936-a454-6206018dccf3",
								"exec": [
									"tests['Status code is 401'] = pm.response.to.have.status(401);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"complete\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/tasks/:id",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "094e48c6-4e4c-4197-9b48-042d1f626a33",
								"exec": [
									"tests[\"Status code is 204\"] = pm.response.to.have.status(204);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"type": "text",
								"value": "XMLHttpRequest"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"description\":\"This is a task\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/tasks/:id",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{taskId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3920382-0c87-4a86-848d-686a7a72ffbd",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"var tasks = responseJSON || {};",
									"",
									"tests['Tasks is empty'] = tasks.length == 0;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tasks",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}